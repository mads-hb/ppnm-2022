The matrix A is:

         4          5          5          6          5          3          8 
         5          1          7          4          7          7          1 
         5          7          1          5          8          8          7 
         6          4          5          3          3          6          2 
         5          7          8          3          2          1          4 
         3          7          8          6          1          2          4 
         8          1          7          2          4          4          6 

After using eigenvalue decomposition the eigenvalues are:
     -9.93   1.26e-16   6.62e-24   2.53e-09  -5.48e-12  -1.16e-14   1.18e-14 
  1.81e-16      -8.45   1.26e-08   4.85e-10   1.49e-13   2.36e-08   6.87e-21 
  1.22e-16   1.26e-08      -3.99  -9.26e-10  -4.71e-14   1.58e-16  -2.15e-08 
  2.53e-09   4.85e-10  -9.26e-10      0.304    2.5e-15          0   1.24e-08 
 -5.48e-12   1.49e-13  -4.73e-14   3.05e-15        2.1   1.46e-08   1.57e-09 
 -1.13e-14   2.36e-08  -1.22e-17   6.84e-16   1.46e-08       5.59   -2.9e-09 
  9.13e-15  -3.19e-16  -2.15e-08   1.24e-08   1.57e-09   -2.9e-09       33.4 

and the eigenvectors are the columns of:
    0.0697     -0.357      0.525      0.551    -0.0939     -0.341      0.405 
    -0.342      0.542      0.469    -0.0254      0.271      0.403      0.365 
    -0.536     -0.569     -0.251     -0.316      0.135      0.085      0.449 
   -0.0934       0.23     -0.526      0.505     -0.472      0.272      0.332 
      0.52     0.0239     -0.333       0.14      0.689     0.0217      0.351 
     0.558     -0.125      0.194     -0.455     -0.424      0.348      0.357 
   -0.0371      0.432     -0.131     -0.337      -0.15     -0.721      0.374 
The total number of sweeps before convergence: 6




Now we check that VT*A*V = D
VT*A*V is:
     -9.93  -1.67e-16   4.86e-17   2.53e-09  -5.48e-12  -1.03e-14   1.91e-14 
 -8.88e-16      -8.45   1.26e-08   4.85e-10    1.5e-13   2.36e-08     -2e-15 
  5.07e-16   1.26e-08      -3.99  -9.26e-10  -5.07e-14  -1.67e-16  -2.15e-08 
  2.53e-09   4.85e-10  -9.26e-10      0.304   1.51e-15   1.11e-16   1.24e-08 
 -5.48e-12    1.5e-13  -4.94e-14   1.08e-15        2.1   1.46e-08   1.57e-09 
  -1.1e-14   2.36e-08  -8.88e-16  -4.44e-16   1.46e-08       5.59   -2.9e-09 
  1.84e-14  -4.44e-15  -2.15e-08   1.24e-08   1.57e-09   -2.9e-09       33.4 
and D is:
     -9.93   1.26e-16   6.62e-24   2.53e-09  -5.48e-12  -1.16e-14   1.18e-14 
  1.81e-16      -8.45   1.26e-08   4.85e-10   1.49e-13   2.36e-08   6.87e-21 
  1.22e-16   1.26e-08      -3.99  -9.26e-10  -4.71e-14   1.58e-16  -2.15e-08 
  2.53e-09   4.85e-10  -9.26e-10      0.304    2.5e-15          0   1.24e-08 
 -5.48e-12   1.49e-13  -4.73e-14   3.05e-15        2.1   1.46e-08   1.57e-09 
 -1.13e-14   2.36e-08  -1.22e-17   6.84e-16   1.46e-08       5.59   -2.9e-09 
  9.13e-15  -3.19e-16  -2.15e-08   1.24e-08   1.57e-09   -2.9e-09       33.4 
Comparing these gives (V.T * A * V).approx(D) => True




Now we check that VT*A*V = D
V*D*VT is:
         4          5          5          6          5          3          8 
         5          1          7          4          7          7          1 
         5          7          1          5          8          8          7 
         6          4          5          3          3          6          2 
         5          7          8          3          2          1          4 
         3          7          8          6          1          2          4 
         8          1          7          2          4          4          6 
and A is:
         4          5          5          6          5          3          8 
         5          1          7          4          7          7          1 
         5          7          1          5          8          8          7 
         6          4          5          3          3          6          2 
         5          7          8          3          2          1          4 
         3          7          8          6          1          2          4 
         8          1          7          2          4          4          6 
Comparing these gives (V * D * V.T).approx(A) => True




Finally we check that V is orthogonal
VT*V is:
         1   1.21e-16   1.09e-16   1.86e-16   6.94e-17  -3.82e-17   1.21e-16 
  1.21e-16          1   1.46e-16   1.94e-16   1.39e-17          0   1.11e-16 
  1.09e-16   1.46e-16          1   4.09e-16  -3.82e-17   2.78e-17    1.6e-16 
  1.86e-16   1.94e-16   4.09e-16          1   9.02e-17  -1.94e-16  -2.78e-17 
  6.94e-17   1.39e-17  -3.82e-17   9.02e-17          1  -6.94e-17   3.47e-17 
 -3.82e-17          0   2.78e-17  -1.94e-16  -6.94e-17          1          0 
  1.21e-16   1.11e-16    1.6e-16  -2.78e-17   3.47e-17          0          1 
and V*VT is:
         1   2.22e-16  -3.61e-16   5.55e-17   1.39e-16  -2.78e-17  -1.67e-16 
  2.22e-16          1  -2.22e-16  -1.39e-17          0          0   1.67e-16 
 -3.61e-16  -2.22e-16          1  -1.39e-16  -1.39e-16   1.67e-16  -2.78e-17 
  5.55e-17  -1.39e-17  -1.39e-16          1  -1.39e-17          0   1.39e-16 
  1.39e-16          0  -1.39e-16  -1.39e-17          1  -2.78e-17   8.33e-17 
 -2.78e-17          0   1.67e-16          0  -2.78e-17          1   5.55e-17 
 -1.67e-16   1.67e-16  -2.78e-17   1.39e-16   8.33e-17   5.55e-17          1 
Comparing these gives (V.T* V).approx(V*V.T) => True
Comparing to identity gives (V.T* V).approx(matrix.id(7)) => True
